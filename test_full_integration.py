#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç Meta News Bot
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –í–°–ï —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–π–¥–æ–º –Ω–∞ Railway
"""

import asyncio
import sys
import os
import json
import time
from typing import Dict, List, Tuple
sys.path.append(os.path.dirname(__file__))

# –ò–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
import httpx
from src.pipeline import run_update, _get_proxy_for_region, _get_random_headers, _fix_facebook_url
from src.smart_formatter import group_changes_by_region, format_region_summary, format_change_smart
from src.config import validate_proxy_config
from src.storage import load_cache, save_cache
from src.llm_client import chat
from src.summarize import summarize_rules
from src.llm_client import translate_compact_html
from src.tg.handlers import _is_meaningful_change

class FullTestResults:
    def __init__(self):
        self.total_tests = 0
        self.passed = 0
        self.failed = 0
        self.warnings = 0
        self.errors = []
        self.test_data = {}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    def start_test(self, name: str):
        self.total_tests += 1
        print(f"\n[{self.total_tests:2d}] {name}")
        print("-" * 60)
    
    def pass_test(self, name: str, details: str = ""):
        print(f"[+] {name}" + (f" - {details}" if details else ""))
        self.passed += 1
    
    def fail_test(self, name: str, error: str):
        print(f"[-] {name}: {error}")
        self.failed += 1
        self.errors.append(f"{name}: {error}")
    
    def warn_test(self, name: str, warning: str):
        print(f"[!] {name}: {warning}")
        self.warnings += 1
    
    def summary(self):
        print("\n" + "="*80)
        print("üöÄ –ü–û–õ–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ - –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("="*80)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.total_tests}")
        print(f"[+] –ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed}")
        print(f"[-] –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.failed}")
        print(f"[!] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {self.warnings}")
        
        if self.failed > 0:
            print(f"\n[ERRORS] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:")
            for error in self.errors:
                print(f"  ‚Ä¢ {error}")
            return False
        else:
            print(f"\n[OK] –í–°–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Railway!")
            return True

async def test_1_configuration(results: FullTestResults):
    """–¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    results.start_test("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏
        validate_proxy_config()
        results.pass_test("–ü—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        with open("config.json", "r", encoding="utf-8") as f:
            config = json.load(f)
        sources = config.get("sources", [])
        if len(sources) >= 25:
            results.pass_test(f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({len(sources)} —à—Ç.)")
        else:
            results.fail_test("–ò—Å—Ç–æ—á–Ω–∏–∫–∏", f"–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_env = ["TELEGRAM_BOT_TOKEN", "OPENROUTER_API_KEY", "USE_PROXY"]
        for env_var in required_env:
            if os.getenv(env_var):
                results.pass_test(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {env_var}")
            else:
                results.fail_test(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {env_var}", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        results.test_data['sources'] = sources
    
    except Exception as e:
        results.fail_test("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", str(e))

async def test_2_proxy_functionality(results: FullTestResults):
    """–¢–µ—Å—Ç 2: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏"""
    results.start_test("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏")
    
    regions_to_test = [("GLOBAL", None), ("EU", "de"), ("MD", "md")]
    
    for region, proxy_country in regions_to_test:
        try:
            proxy_config = _get_proxy_for_region(region, proxy_country, "integration_test")
            if proxy_config:
                results.pass_test(f"–ü—Ä–æ–∫—Å–∏ –¥–ª—è {region}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                try:
                    timeout = httpx.Timeout(10.0)
                    async with httpx.AsyncClient(timeout=timeout, proxies=proxy_config, verify=False) as client:
                        response = await client.get("https://httpbin.org/ip")
                        ip_data = response.json()
                        results.pass_test(f"–ü—Ä–æ–∫—Å–∏ {region} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", f"IP: {ip_data.get('origin', 'unknown')}")
                except Exception as e:
                    results.warn_test(f"–ü—Ä–æ–∫—Å–∏ {region} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: {str(e)[:50]}")
            else:
                results.warn_test(f"–ü—Ä–æ–∫—Å–∏ –¥–ª—è {region}", "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except Exception as e:
            results.fail_test(f"–ü—Ä–æ–∫—Å–∏ –¥–ª—è {region}", str(e))

async def test_3_http_requests(results: FullTestResults):
    """–¢–µ—Å—Ç 3: HTTP –∑–∞–ø—Ä–æ—Å—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    results.start_test("HTTP –∑–∞–ø—Ä–æ—Å—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    
    test_urls = [
        ("https://transparency.meta.com/policies/ad-standards/", "Meta —Å–∞–π—Ç"),
        ("https://developers.facebook.com/docs/marketing-api/", "Facebook developers"),
        ("https://metastatus.com/", "Status —Å–∞–π—Ç")
    ]
    
    for url, name in test_urls:
        try:
            processed_url = _fix_facebook_url(url)
            proxy_config = _get_proxy_for_region("GLOBAL", None, "integration_test")
            headers = _get_random_headers(processed_url, "en-US,en;q=0.9")
            
            timeout = httpx.Timeout(15.0)
            async with httpx.AsyncClient(timeout=timeout, proxies=proxy_config, verify=False) as client:
                start_time = time.time()
                response = await client.get(processed_url, headers=headers)
                duration = time.time() - start_time
                
                if response.status_code in [200, 422]:
                    if response.text and len(response.text) > 1000:
                        results.pass_test(f"HTTP –∑–∞–ø—Ä–æ—Å {name}", 
                                        f"–°—Ç–∞—Ç—É—Å: {response.status_code}, {len(response.text)} —Å–∏–º–≤., {duration:.1f}—Å")
                    else:
                        results.warn_test(f"HTTP –∑–∞–ø—Ä–æ—Å {name}", f"–ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç: {len(response.text)} —Å–∏–º–≤.")
                else:
                    results.warn_test(f"HTTP –∑–∞–ø—Ä–æ—Å {name}", f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        except Exception as e:
            if "422" in str(e):
                results.pass_test(f"HTTP –∑–∞–ø—Ä–æ—Å {name}", "422 –æ—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è Meta)")
            else:
                results.fail_test(f"HTTP –∑–∞–ø—Ä–æ—Å {name}", str(e))

async def test_4_pipeline_processing(results: FullTestResults):
    """–¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ pipeline (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
    results.start_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ pipeline (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
        print("  –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...")
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (–¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º timeout —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ
        os.environ["FETCH_RETRIES"] = "1"  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            result = await run_update()
            duration = time.time() - start_time
            
            details = result.get("details", [])
            errors = result.get("errors", [])
            
            results.pass_test("Pipeline –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", f"{duration:.1f}—Å, {len(details)} –∏–∑–º–µ–Ω–µ–Ω–∏–π, {len(errors)} –æ—à–∏–±–æ–∫")
            
            if errors and len(errors) < 20:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
                for error in errors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                    results.warn_test("Pipeline –æ—à–∏–±–∫–∞", f"{error.get('url', 'unknown')}: {error.get('error', '')[:50]}")
            
            results.test_data['pipeline_result'] = result
            results.test_data['details'] = details
            
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            os.environ["FETCH_RETRIES"] = "3"
    
    except Exception as e:
        results.fail_test("Pipeline –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", str(e))

async def test_5_regional_grouping(results: FullTestResults):
    """–¢–µ—Å—Ç 5: –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞"""
    results.start_test("–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ pipeline —Ç–µ—Å—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
    details = results.test_data.get('details', [])
    
    if not details:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ pipeline –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        details = [
            {"title": "Test Global", "region": "GLOBAL", "global_diff": {"changed": [], "added": ["test"], "removed": []}},
            {"title": "Test EU", "region": "EU", "global_diff": {"changed": [], "added": ["eu test"], "removed": []}},
            {"title": "Test MD", "region": "MD", "global_diff": {"changed": [], "added": ["md test"], "removed": []}}
        ]
    
    try:
        grouped = group_changes_by_region(details)
        results.pass_test("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º", f"{len(grouped)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
        
        for region, region_details in grouped.items():
            try:
                formatted = format_region_summary(region, region_details)
                if formatted:
                    results.pass_test(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {region}", f"{len(formatted)} –±–ª–æ–∫–æ–≤")
                else:
                    results.fail_test(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {region}", "–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            except Exception as e:
                results.fail_test(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {region}", str(e))
    
    except Exception as e:
        results.fail_test("–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞", str(e))

async def test_6_smart_formatting(results: FullTestResults):
    """–¢–µ—Å—Ç 6: –£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    results.start_test("–£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    test_detail = {
        "title": "Meta Advertising Standards Update",
        "url": "https://transparency.meta.com/policies/ad-standards/",
        "region": "GLOBAL",
        "global_diff": {
            "changed": [{"was": "Old policy text", "now": "New policy text with important changes"}],
            "added": ["New restriction for political ads", "Updated targeting guidelines"],
            "removed": ["Deprecated feature XYZ"]
        }
    }
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        is_meaningful = _is_meaningful_change(test_detail)
        results.pass_test("–ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏", f"Meaningful: {is_meaningful}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatted_blocks = format_change_smart(test_detail)
        if formatted_blocks:
            results.pass_test("–£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", f"{len(formatted_blocks)} –±–ª–æ–∫–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            full_text = " ".join(formatted_blocks)
            if "GLOBAL" in full_text and "Meta Advertising Standards" in full_text:
                results.pass_test("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ", "–°–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
            else:
                results.warn_test("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ", "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
        else:
            results.fail_test("–£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    
    except Exception as e:
        results.fail_test("–£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", str(e))

async def test_7_llm_functionality(results: FullTestResults):
    """–¢–µ—Å—Ç 7: LLM —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–ò–ò)"""
    results.start_test("LLM —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–ò–ò)")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π LLM –∑–∞–ø—Ä–æ—Å
        test_prompt = "Summarize this in Russian: Meta has updated their advertising policies to include new restrictions."
        
        start_time = time.time()
        response = await asyncio.to_thread(chat, test_prompt)
        duration = time.time() - start_time
        
        if response and len(response.strip()) > 10:
            results.pass_test("LLM –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", f"{len(response)} —Å–∏–º–≤–æ–ª–æ–≤, {duration:.1f}—Å")
        else:
            results.fail_test("LLM –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", f"–ü—É—Å—Ç–æ–π –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç: '{response}'")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        test_text = """
        Meta Advertising Standards have been updated with new requirements for political advertisers.
        All political ads must now include additional disclosure information.
        The update applies to all regions starting January 2025.
        Advertisers must verify their identity through enhanced verification process.
        """
        
        summarized = await asyncio.to_thread(summarize_rules, test_text)
        if summarized and len(summarized) > 20:
            results.pass_test("–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è", f"{len(summarized)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            results.warn_test("–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è", "–ö–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥
        try:
            translated = await asyncio.to_thread(translate_compact_html, 
                                               "Meta has updated advertising policies", 
                                               target_lang="ru", max_len=200)
            if translated and "Meta" in translated:
                results.pass_test("–ü–µ—Ä–µ–≤–æ–¥", f"'{translated[:50]}...'")
            else:
                results.warn_test("–ü–µ—Ä–µ–≤–æ–¥", "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞")
        except Exception as e:
            results.warn_test("–ü–µ—Ä–µ–≤–æ–¥", f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
    
    except Exception as e:
        results.fail_test("LLM —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", str(e))

async def test_8_storage_cache(results: FullTestResults):
    """–¢–µ—Å—Ç 8: –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    results.start_test("–°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫—ç—à–∞
        cache_data = load_cache()
        if cache_data:
            items = cache_data.get("items", [])
            results.pass_test("–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞", f"{len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        else:
            results.pass_test("–ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞", "–ü—É—Å—Ç–æ–π –∫—ç—à (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞
        test_cache = {
            "items": [
                {"tag": "test", "url": "https://example.com", "region": "GLOBAL", 
                 "title": "Test Item", "hash": "test_hash"}
            ],
            "updated": time.time()
        }
        
        save_cache(test_cache)
        results.pass_test("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞", "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        reloaded_cache = load_cache()
        if reloaded_cache and reloaded_cache.get("items"):
            results.pass_test("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        else:
            results.warn_test("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞", "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å")
    
    except Exception as e:
        results.fail_test("–°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è", str(e))

async def test_9_error_handling(results: FullTestResults):
    """–¢–µ—Å—Ç 9: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    results.start_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ URL
    try:
        proxy_config = _get_proxy_for_region("GLOBAL", None, "error_test")
        headers = _get_random_headers("https://nonexistent-meta-site-12345.com", "en-US")
        
        timeout = httpx.Timeout(5.0)
        async with httpx.AsyncClient(timeout=timeout, proxies=proxy_config, verify=False) as client:
            try:
                response = await client.get("https://nonexistent-meta-site-12345.com", headers=headers)
                results.warn_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ URL", "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç")
            except Exception as e:
                results.pass_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ URL", "–û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
    except Exception as e:
        results.pass_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", "–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON
    try:
        invalid_json = '{"invalid": json}'
        json.loads(invalid_json)
        results.fail_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON", "–û—à–∏–±–∫–∞ –Ω–µ –ø–æ–π–º–∞–Ω–∞")
    except json.JSONDecodeError:
        results.pass_test("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON", "JSON –æ—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")

async def test_10_integration_flow(results: FullTestResults):
    """–¢–µ—Å—Ç 10: –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫"""
    results.start_test("–ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫")
    
    try:
        print("  –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        results.pass_test("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", "–í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # 2. –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏-–ø–∞–π–ø–ª–∞–π–Ω —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        test_details = [
            {
                "title": "Integration Test Change",
                "url": "https://transparency.meta.com/policies/ad-standards/",
                "region": "GLOBAL",
                "global_diff": {
                    "changed": [{"was": "Test old content", "now": "Test new content with significant changes"}],
                    "added": ["New integration test requirement"],
                    "removed": []
                }
            }
        ]
        
        # 3. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
        grouped = group_changes_by_region(test_details)
        results.pass_test("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞", f"{len(grouped)} –≥—Ä—É–ø–ø")
        
        # 4. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        for region, details in grouped.items():
            formatted = format_region_summary(region, details)
            if formatted:
                results.pass_test(f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {region}", "OK")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ
        required_functions = [
            (_get_proxy_for_region, "–ü—Ä–æ–∫—Å–∏ —Ñ—É–Ω–∫—Ü–∏—è"),
            (format_change_smart, "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"),
            (group_changes_by_region, "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞"),
            (_is_meaningful_change, "–ê–Ω–∞–ª–∏–∑ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏")
        ]
        
        for func, name in required_functions:
            if callable(func):
                results.pass_test(f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {name}", "–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                results.fail_test(f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {name}", "–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        results.pass_test("–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ")
    
    except Exception as e:
        results.fail_test("–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", str(e))

async def run_full_integration_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*80)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï —Ñ—É–Ω–∫—Ü–∏–∏ Meta News Bot –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–π–¥–æ–º...")
    print("–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
    
    results = FullTestResults()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    await test_1_configuration(results)
    await test_2_proxy_functionality(results)
    await test_3_http_requests(results)
    await test_4_pipeline_processing(results)
    await test_5_regional_grouping(results)
    await test_6_smart_formatting(results)
    await test_7_llm_functionality(results)
    await test_8_storage_cache(results)
    await test_9_error_handling(results)
    await test_10_integration_flow(results)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    success = results.summary()
    
    if success:
        print("\nüéØ –ì–û–¢–û–í–û –ö –î–ï–ü–õ–û–ô–î–û–ú–£!")
        print("–í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ.")
        print("–ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–µ–ø–ª–æ–∏—Ç—å –Ω–∞ Railway.")
    else:
        print("\nüõë –ù–ï –ì–û–¢–û–í–û –ö –î–ï–ü–õ–û–ô–î–û–ú–£!")
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏.")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–π–¥–æ–º.")
    
    return success

if __name__ == "__main__":
    success = asyncio.run(run_full_integration_tests())
    sys.exit(0 if success else 1)