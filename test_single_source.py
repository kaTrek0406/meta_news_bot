#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ 422 –æ—à–∏–±–æ–∫
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(__file__))

import httpx
from src.pipeline import _get_proxy_for_region, _get_random_headers, _fix_facebook_url

async def test_single_source():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ —Å –Ω–∞—à–∏–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–π URL
    url = "https://transparency.meta.com/policies/ad-standards/"
    region = "GLOBAL"
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {url}")
    print(f"üåç –†–µ–≥–∏–æ–Ω: {region}")
    print("=" * 50)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL
    processed_url = _fix_facebook_url(url)
    print(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π URL: {processed_url}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
    proxy_config = _get_proxy_for_region(region, None, "test_session")
    if proxy_config:
        print(f"üîê –ü—Ä–æ–∫—Å–∏: {list(proxy_config.keys())}")
    else:
        print("‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = _get_random_headers(processed_url, "en-US,en;q=0.9")
    print(f"üì° User-Agent: {headers.get('User-Agent', 'N/A')[:80]}...")
    print(f"üì° Accept: {headers.get('Accept', 'N/A')}")
    print(f"üì° Referer: {headers.get('Referer', 'N/A')}")
    
    print("\nüöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...")
    
    timeout = httpx.Timeout(30.0, connect=15.0)
    verify_ssl = proxy_config is None
    
    try:
        async with httpx.AsyncClient(
            timeout=timeout, 
            follow_redirects=True, 
            proxies=proxy_config, 
            verify=verify_ssl
        ) as client:
            
            response = await client.get(processed_url, headers=headers)
            
            print(f"üìä Status Code: {response.status_code}")
            print(f"üìä Content Length: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if response.status_code == 422:
                if response.text and len(response.text.strip()) > 100:
                    print("‚úÖ 422 —Å—Ç–∞—Ç—É—Å —Å –≤–∞–ª–∏–¥–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º - –ü–†–ò–ù–ò–ú–ê–ï–ú")
                    content_preview = response.text[:200] + "..." if len(response.text) > 200 else response.text
                    print(f"üìÑ –ü—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {content_preview}")
                else:
                    print("‚ùå 422 —Å—Ç–∞—Ç—É—Å —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º - –û–¢–ö–õ–û–ù–Ø–ï–ú")
            elif response.status_code in [200, 201, 202]:
                print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥")
                content_preview = response.text[:200] + "..." if len(response.text) > 200 else response.text
                print(f"üìÑ –ü—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {content_preview}")
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_single_source())