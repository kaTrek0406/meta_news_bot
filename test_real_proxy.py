#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–∫—Å–∏ –≤ production Railway
"""

import asyncio
import httpx
import os
import sys
sys.path.append(os.path.dirname(__file__))

from src.pipeline import _get_proxy_for_region

async def test_real_ip():
    print("üåê –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û IP –í RAILWAY")
    print("="*50)
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ["USE_PROXY"] = "1"
    os.environ["PROXY_PROVIDER"] = "froxy"
    os.environ["PROXY_URL"] = "http://SakkTDU3kVHpEtNr:wifi;md;;;@proxy.froxy.com:9000"
    
    # 1. IP –±–µ–∑ –ø—Ä–æ–∫—Å–∏
    print("\n1. IP –ë–ï–ó –ü–†–û–ö–°–ò:")
    try:
        async with httpx.AsyncClient(timeout=httpx.Timeout(10.0)) as client:
            r = await client.get("https://httpbin.org/ip")
            data = r.json()
            print(f"   IP: {data.get('origin')}")
            print(f"   –°—Ç–∞—Ç—É—Å: {r.status_code}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")
    
    # 2. IP —á–µ—Ä–µ–∑ –Ω–∞—à –ø—Ä–æ–∫—Å–∏
    print("\n2. IP –ß–ï–†–ï–ó –ù–ê–® –ü–†–û–ö–°–ò:")
    try:
        proxies = _get_proxy_for_region("GLOBAL", None, "test_real")
        if proxies:
            print(f"   –ü—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥: {proxies}")
            async with httpx.AsyncClient(timeout=httpx.Timeout(10.0), proxies=proxies, verify=False) as client:
                r = await client.get("https://httpbin.org/ip")
                data = r.json()
                print(f"   IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {data.get('origin')}")
                print(f"   –°—Ç–∞—Ç—É—Å: {r.status_code}")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º –≥–µ–æ
                try:
                    geo_r = await client.get("https://ipapi.co/json/")
                    geo_data = geo_r.json()
                    print(f"   –°—Ç—Ä–∞–Ω–∞: {geo_data.get('country_name')} ({geo_data.get('country_code')})")
                    print(f"   –†–µ–≥–∏–æ–Ω: {geo_data.get('region')}")
                except:
                    print("   –ì–µ–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            print("   –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {e}")
    
    # 3. –¢–µ—Å—Ç Meta URL
    print("\n3. –¢–ï–°–¢ META URL:")
    test_urls = [
        "https://transparency.meta.com/policies/ad-standards/?_fb_noscript=1"
    ]
    
    for i, url in enumerate(test_urls, 1):
        print(f"\n   {i}. –¢–µ—Å—Ç–∏—Ä—É–µ–º: {url}")
        
        # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
        try:
            async with httpx.AsyncClient(timeout=httpx.Timeout(10.0)) as client:
                r = await client.get(url)
                print(f"      –ë–ï–ó –ø—Ä–æ–∫—Å–∏: {r.status_code}, {len(r.text)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"      –ë–ï–ó –ø—Ä–æ–∫—Å–∏: –û–®–ò–ë–ö–ê - {e}")
        
        # –° –ø—Ä–æ–∫—Å–∏
        try:
            proxies = _get_proxy_for_region("GLOBAL", None, "test_meta")
            if proxies:
                async with httpx.AsyncClient(timeout=httpx.Timeout(10.0), proxies=proxies, verify=False) as client:
                    r = await client.get(url)
                    print(f"      –° –ø—Ä–æ–∫—Å–∏: {r.status_code}, {len(r.text)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"      –° –ø—Ä–æ–∫—Å–∏: –û–®–ò–ë–ö–ê - {e}")
    
    print("\n" + "="*50)
    print("üåê –¢–ï–°–¢ IP –ó–ê–í–ï–†–®–ï–ù")

if __name__ == "__main__":
    asyncio.run(test_real_ip())