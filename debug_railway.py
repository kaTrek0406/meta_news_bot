#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–∫—Å–∏ –≤ production Railway
"""

import os
import asyncio
import httpx
import sys
sys.path.append(os.path.dirname(__file__))

from src.pipeline import _get_proxy_for_region
from src.config import USE_PROXY, PROXY_URL, PROXY_URL_EU, PROXY_PROVIDER

async def debug_proxy_issue():
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ö–°–ò –í PRODUCTION")
    print("="*50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("1. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print(f"   USE_PROXY: {USE_PROXY}")
    print(f"   PROXY_PROVIDER: {PROXY_PROVIDER}")
    print(f"   PROXY_URL: {PROXY_URL[:50] if PROXY_URL else None}...")
    print(f"   PROXY_URL_EU: {PROXY_URL_EU[:50] if PROXY_URL_EU else None}...")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
    print("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    regions = ["GLOBAL", "EU", "MD"]
    
    for region in regions:
        try:
            proxy_config = _get_proxy_for_region(region, None, "debug_test")
            print(f"   {region}: {proxy_config}")
            
            if proxy_config:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                http_proxy = proxy_config.get("http://", "–ù–ï–¢")
                https_proxy = proxy_config.get("https://", "–ù–ï–¢") 
                print(f"       HTTP:  {http_proxy[:60]}...")
                print(f"       HTTPS: {https_proxy[:60]}...")
        except Exception as e:
            print(f"   {region}: –û–®–ò–ë–ö–ê - {e}")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    
    proxy_config = _get_proxy_for_region("GLOBAL", None, "debug_test")
    if proxy_config:
        try:
            timeout = httpx.Timeout(10.0)
            async with httpx.AsyncClient(timeout=timeout, proxies=proxy_config, verify=False) as client:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP
                response = await client.get("https://httpbin.org/ip")
                ip_data = response.json()
                print(f"   IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {ip_data}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Meta URL
                headers = {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
                }
                
                response = await client.get("https://transparency.meta.com/policies/ad-standards/?_fb_noscript=1", headers=headers)
                print(f"   Meta –æ—Ç–≤–µ—Ç: {response.status_code}, —Ä–∞–∑–º–µ—Ä: {len(response.text)}")
                
                if response.status_code == 422 and len(response.text) > 1000:
                    print("   ‚úÖ 422 —Å –±–æ–ª—å—à–∏–º HTML - —ç—Ç–æ OK!")
                else:
                    print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}, —Ä–∞–∑–º–µ—Ä {len(response.text)}")
                    
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    else:
        print("   ‚ùå –ü—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞!")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    print("\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–ï–ó –ø—Ä–æ–∫—Å–∏:")
    try:
        timeout = httpx.Timeout(10.0)
        async with httpx.AsyncClient(timeout=timeout, verify=False) as client:
            response = await client.get("https://httpbin.org/ip")
            ip_data = response.json()
            print(f"   IP –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {ip_data}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {e}")
        
    print("\n" + "="*50)
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

if __name__ == "__main__":
    asyncio.run(debug_proxy_issue())