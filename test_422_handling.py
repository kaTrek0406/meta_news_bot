#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ 422 —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è Meta —Å–∞–π—Ç–æ–≤
"""

import os
import asyncio
import httpx
import sys
sys.path.append(os.path.dirname(__file__))

from src.pipeline import _get_proxy_for_region, _get_random_headers, _fix_facebook_url

async def test_422_handling():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò 422 –°–¢–ê–¢–£–°–ê")
    print("="*50)
    
    # –ù–∞—Å—Ç—Ä–æ–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ["USE_PROXY"] = "1"
    os.environ["PROXY_PROVIDER"] = "froxy"
    os.environ["PROXY_URL"] = "http://SakkTDU3kVHpEtNr:wifi;md;;;@proxy.froxy.com:9000"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ Meta URL
    test_urls = [
        "https://transparency.meta.com/policies/ad-standards/",
        "https://transparency.meta.com/policies/ad-standards/restricted-goods-services/drugs-pharmaceuticals"
    ]
    
    for i, url in enumerate(test_urls, 1):
        print(f"\n{i}. –¢–µ—Å—Ç–∏—Ä—É–µ–º URL: {url}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ URL
        processed_url = _fix_facebook_url(url)
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π URL: {processed_url}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
        proxies = _get_proxy_for_region("GLOBAL", None, "test_422")
        if proxies:
            proxy_info = proxies.get('https://') or proxies.get('http://', '')
            safe_proxy = proxy_info.split('@')[-1] if '@' in proxy_info else proxy_info
            print(f"   –ü—Ä–æ–∫—Å–∏: {safe_proxy}")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = _get_random_headers(processed_url, "en-US,en;q=0.9")
        
        # HTTP –∑–∞–ø—Ä–æ—Å - —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ –∫–∞–∫ –≤ pipeline
        try:
            timeout = httpx.Timeout(15.0)
            async with httpx.AsyncClient(timeout=timeout, proxies=proxies, verify=False) as client:
                try:
                    response = await client.get(processed_url, headers=headers)
                    print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
                    print(f"   –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –¢–æ—á–Ω–æ —Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ pipeline
                    html = None
                    if response.status_code == 422:
                        is_meta_site = any(domain in processed_url for domain in ["transparency.meta.com", "facebook.com", "about.fb.com", "developers.facebook.com"])
                        if is_meta_site and response.text and len(response.text.strip()) > 100:
                            print(f"   ‚úÖ Meta —Å–∞–π—Ç: –°—Ç–∞—Ç—É—Å 422 –Ω–æ –ø–æ–ª—É—á–µ–Ω HTML ({len(response.text)} —Å–∏–º–≤.), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                            html = response.text
                        elif response.text and len(response.text.strip()) > 500:
                            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å 422 –Ω–æ –ø–æ–ª—É—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π HTML ({len(response.text)} —Å–∏–º–≤.), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                            html = response.text
                        else:
                            print(f"   ‚ö†Ô∏è –°—Ç–∞—Ç—É—Å 422 —Å –∫–æ—Ä–æ—Ç–∫–∏–º –æ—Ç–≤–µ—Ç–æ–º ({len(response.text) if response.text else 0} —Å–∏–º–≤.), –æ—à–∏–±–∫–∞!")
                            response.raise_for_status()
                    elif response.status_code in [200, 201, 202]:
                        html = response.text
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                    else:
                        response.raise_for_status()
                        html = response.text
                    
                    if html:
                        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                        if "Transparency Center" in html:
                            print("   ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç Meta Transparency Center –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
                        elif "blocked" in html.lower() or "error" in html.lower():
                            print("   ‚ùå –í–æ–∑–º–æ–∂–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ")
                        else:
                            print("   ‚úÖ HTML –ø–æ–ª—É—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    else:
                        print("   ‚ùå HTML –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                
                except httpx.HTTPStatusError as e:
                    print(f"   ‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ –ø–æ–π–º–∞–Ω–∞: {e}")
                    if hasattr(e, 'response') and e.response and e.response.text:
                        print(f"      –°—Ç–∞—Ç—É—Å: {e.response.status_code}")
                        print(f"      –†–∞–∑–º–µ—Ä: {len(e.response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        if e.response.status_code == 422 and len(e.response.text) > 1000:
                            print("      ‚úÖ –ù–æ —ç—Ç–æ 422 —Å HTML - –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ —É—Å–ø–µ—Ö –≤ pipeline!")
                    
        except httpx.HTTPStatusError as e:
            print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {e}")
            if hasattr(e, 'response') and e.response:
                print(f"      –°—Ç–∞—Ç—É—Å: {e.response.status_code}")
                print(f"      –†–∞–∑–º–µ—Ä: {len(e.response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"   ‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    print("\n" + "="*50)
    print("üß™ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")

if __name__ == "__main__":
    asyncio.run(test_422_handling())